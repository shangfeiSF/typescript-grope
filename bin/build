var fs = require('fs')
var path = require('path')
var child_process = require('child_process')

var nopt = require('nopt')
var colors = require('colors')
var Promise = require('bluebird')

Promise.promisifyAll(fs)
var execAsync = Promise.promisify(child_process.exec, {
  context: child_process,
  multiArgs: true
})

var DIRS = {
  main: path.join(__dirname, '../main'),
  build: path.join(__dirname, '../build'),
  mainSubs: fs.readdirSync(path.join(__dirname, '../main'))
}

var CMD = {
  main: 'tsc',
  outDir: ['--outDir'],
  target: ['--target']
}

var knowns = {
  'index': Array,
  'details': Boolean,
  'serial': Boolean,
  'target': String
}
var shorts = (function () {
  var shorts = {
    'i': ['--index'],
    'd': ['--details', 'true'],
    's': ['--serial', 'true'],
    't': ['--target'],
    't5': ['--target', 'ES5'],
    't6': ['--target', 'ES6']
  }

  DIRS.mainSubs.forEach(function (dir) {
    var state = fs.statSync(path.join(DIRS.main, dir))

    if (state.isDirectory()) {
      var cmd = 'i' + dir.split('\.').shift()
      shorts[cmd] = ['--index']
      shorts[cmd].push(dir)
    }
  })

  return shorts
})()
var options = nopt(knowns, shorts, process.argv, 2)

Promise.filter(DIRS.mainSubs, function (dirname) {
  return fs.statAsync(path.join(DIRS.main, dirname))
    .then(function (state) {
      return state.isDirectory() &&
        (
          (options.index && options.index.length) ?
            options.index.indexOf(dirname) > -1 :
            true
        )
    })
})
  .map(function (dirname) {
    var cmd = [
      CMD.main,
      CMD.outDir.concat(path.join(DIRS.build, dirname)).join(' '),
    ]

    options.target && cmd.push(CMD.target.concat(options.target)).join(' ')

    var dirpath = path.join(DIRS.main, dirname)

    return fs.readdirAsync(dirpath)
      .filter(function (file) {
        return fs.statAsync(path.join(dirpath, file))
          .then(function (state) {
            return path.extname(file) == '.ts' && !state.isDirectory()
          })
      })
      .then(function (files) {
        return {
          cmd: cmd,
          dirname: dirname,
          dirpath: dirpath,
          files: files
        }
      })
  })
  .then(function (configs) {
    var ITERATOR = options.serial ? Promise.mapSeries : Promise.map

    return ITERATOR(configs, function (config) {
      console.log(('Begin to compiler:' + config.dirpath).yellow)

      return Promise.mapSeries(config.files, function (file) {
        var cmd = config.cmd.concat(path.join(config.dirpath, file)).join(' ')

        return execAsync(cmd, {cwd: path.join(__dirname, '../main')})
          .then(
            function (details) {
              options.details && console.log(details)
            },
            function (error) {
              options.details && console.log(error.message)
            }
          )
          .finally(function () {
            var msg = 'Done:' + (options.serial ? '' : (config.dirname + '/')) + file
            console.log(msg.cyan)
          })
      })
        .then(function () {
          console.log(('Finish to compiler:' + config.dirpath + '\n').green)
        })
    })
  })